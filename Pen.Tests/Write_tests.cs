using System;
using Xunit;

namespace Unit_test
{
    public class Write_test
    {
        [Fact]
        public void testWriteWithOutInkOneParamCtor()
        {
            var pen = new Pen(0);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteWithOutInkTwoParamCtor()
        {
            var pen = new Pen(0, 1.0);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteWithOutInkTreeParamCtor()
        {
            var pen = new Pen(0, 1.0, "Red");

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteNoText()
        {
            var pen = new Pen(1000, 1.0, "Red");

            var writeMethod = pen.write("");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteOneParamCtor()
        {
            var pen = new Pen(1000);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Test_line.", writeMethod);
        }

        [Fact]
        public void testWriteTwoParamCtor()
        {
            var pen = new Pen(1000, 1.0);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Test_line.", writeMethod);
        }

        [Fact]
        public void testWriteTreeParamCtor()
        {
            var pen = new Pen(1000, 1.0, "Red");

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Test_line.", writeMethod);
        }

        [Fact]
        public void testWriteNotEnoughInkOneParamCtor()
        {
            var pen = new Pen(2);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Te", writeMethod);
        }

        [Fact]
        public void testWriteNotEnoughInkTwoParamCtor()
        {
            var pen = new Pen(2, 1.0);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Te", writeMethod);
        }

        [Fact]
        public void testWriteNotEnoughInkTreeParamCtor()
        {
            var pen = new Pen(2, 1.0, "Red");

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Te", writeMethod);
        }

        [Fact]
        public void testWriteNotEnoughtInkSizeLetter2_0()
        {
            var pen = new Pen(6, 2.0);

            var writeMethod = pen.write("Test_line,test.");

            Assert.Equal("Tes", writeMethod);
        }

        [Fact]
        public void testWriteSizeLetter_0()
        {
            var pen = new Pen(10, 0.0);

            var writeMethod = pen.write("Test_line,test.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteSizeLetterNegative()
        {
            var pen = new Pen(10, -1.0);

            var writeMethod = pen.write("Test_line,test.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteWithEmptyColor()
        {
            var pen = new Pen(15, 1.0, "");

            var writeMethod = pen.write("Test_line,test.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteNegativeInkQuantity()
        {
            var pen = new Pen(-4);

            var writeMethod = pen.write("Test_line.");

            Assert.Equal("", writeMethod);
        }

        [Fact]
        public void testWriteSomeStrings()
        {
            var pen = new Pen(1000);

            pen.write("Test_line.");
            var writeMethod = pen.write("Hello_world!");

            Assert.Equal("Hello_world!", writeMethod);
        }

        [Fact]
        public void testWriteFloatingPointSizeLetter()
        {
            var pen = new Pen(5, 0.5);
            var writeMethod = pen.write("Test_line.");

            Assert.Equal("Tes", writeMethod);
        }

        [Fact]
        public void testWriteTextWithSpace()
        {
            var pen = new Pen(8, 1);
            var writeMethod = pen.write("Test line");

            Assert.Equal("Test line", writeMethod);
        }

    }
}
